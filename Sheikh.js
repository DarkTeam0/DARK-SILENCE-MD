const config = require('../config')
const { cmd, commands } = require('../command')
const os = require("os")
const { runtime } = require('../lib/functions')

let currentPage = {};
let mekMap = {};
let pages = [
  [
    { id: 'menu_dl', displayText: 'üì• Download Menu' },
    { id: 'menu_ai', displayText: 'ü§ñ AI Menu' },
    { id: 'menu_anime', displayText: 'üéå Anime Menu' },
  ],
  [
    { id: 'menu_convert', displayText: 'üîÑ Convert Menu' },
    { id: 'menu_fun', displayText: 'üéâ Fun Menu' },
    { id: 'menu_main', displayText: 'üè† Main Menu' },
  ],
  [
    { id: 'menu_group', displayText: 'üë• Group Menu' },
    { id: 'menu_owner', displayText: 'üëë Owner Menu' },
    { id: 'menu_other', displayText: 'üì¶ Other Menu' },
  ],
  [
    { id: 'menu_reaction', displayText: 'üòä Reactions Menu' },
    { id: 'menu_scammer', displayText: '‚ö†Ô∏è Scammer Info' },
    { id: 'menu_logo', displayText: 'üñºÔ∏è Logo Menu' },
  ]
];

const buildButtonMessage = (page, from) => {
  const buttons = pages[page].map(b => ({ buttonId: b.id, buttonText: { displayText: b.displayText }, type: 1 }));
  if (page > 0) {
    buttons.push({ buttonId: 'prev_page', buttonText: { displayText: '‚¨ÖÔ∏è Previous' }, type: 1 });
  }
  if (page < pages.length - 1) {
    buttons.push({ buttonId: 'next_page', buttonText: { displayText: '‚û°Ô∏è Next' }, type: 1 });
  }
  return {
    image: { url: "https://i.ibb.co/YdSKMhv/6767.jpg" },
    caption: `*Hello!* *Runtime:* ${runtime(process.uptime())} *RAM Use:* ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${Math.round(os.totalmem() / 1024 / 1024)}MB *Choose an option below:*`,
    footer: 'íÅÇìÑÇ‚ù•.ùë∫ùëØùë¨ùë∞ùë≤ùëØ ùë®ùë≥ùë∞ üî•‡ºΩ‡ºº‡øê ‚ô°‚Ä¢‚Ä¢¬≤‚Å¥‚Å∞¬≤',
    buttons,
    headerType: 4
  };
};

conn.ev.on('messages.upsert', async ({ messages }) => {
  try {
    const msg = messages[0];
    if (!msg.message || !msg.message.buttonsResponseMessage) return;
    const btnId = msg.message.buttonsResponseMessage.selectedButtonId;
    const from = msg.key.remoteJid;

    if (currentPage[from] === undefined) return;

    switch (btnId) {
      case 'next_page':
        currentPage[from]++;
        await conn.sendMessage(from, buildButtonMessage(currentPage[from], from), { quoted: mekMap[from] });
        break;
      case 'prev_page':
        currentPage[from]--;
        await conn.sendMessage(from, buildButtonMessage(currentPage[from], from), { quoted: mekMap[from] });
        break;
      case 'menu_dl':
        await conn.sendMessage(from, { text: 'üì• *Download Menu*\n‚Ä¢ facebook\n‚Ä¢ insta\n‚Ä¢ twitter\n...' }, { quoted: mekMap[from] });
        break;
      case 'menu_ai':
        await conn.sendMessage(from, { text: 'ü§ñ *AI Menu*\n‚Ä¢ gpt\n‚Ä¢ meta\n‚Ä¢ luma\n...' }, { quoted: mekMap[from] });
        break;
      case 'menu_anime':
        await conn.sendMessage(from, { text: 'üéå *Anime Menu*\n‚Ä¢ waifu\n‚Ä¢ neko\n‚Ä¢ anime1\n...' }, { quoted: mekMap[from] });
        break;
      case 'menu_convert':
        await conn.sendMessage(from, { text: 'üîÑ *Convert Menu*\n‚Ä¢ sticker\n‚Ä¢ emojimix\n‚Ä¢ take\n...' }, { quoted: mekMap[from] });
        break;
      case 'menu_fun':
        await conn.sendMessage(from, { text: 'üéâ *Fun Menu*\n‚Ä¢ joke\n‚Ä¢ rate\n‚Ä¢ insult\n...' }, { quoted: mekMap[from] });
        break;
      case 'menu_main':
  await conn.sendMessage(from, { text: 'üè† *Main Menu*\n‚Ä¢ ping\n‚Ä¢ alive\n‚Ä¢ speed\n...' }, { quoted: mekMap[from] });
  break;
case 'menu_group':
  await conn.sendMessage(from, { text: 'üë• *Group Menu*\n‚Ä¢ kick\n‚Ä¢ add\n‚Ä¢ promote\n...' }, { quoted: mekMap[from] });
  break;
case 'menu_owner':
  await conn.sendMessage(from, { text: 'üëë *Owner Menu*\n‚Ä¢ block\n‚Ä¢ restart\n‚Ä¢ setpp\n...' }, { quoted: mekMap[from] });
  break;
case 'menu_other':
  await conn.sendMessage(from, { text: 'üì¶ *Other Menu*\n‚Ä¢ date\n‚Ä¢ count\n‚Ä¢ flip\n...' }, { quoted: mekMap[from] });
  break;
case 'menu_reaction':
  await conn.sendMessage(from, { text: 'üòä *Reactions Menu*\n‚Ä¢ hug\n‚Ä¢ kiss\n‚Ä¢ slap\n...' }, { quoted: mekMap[from] });
  break;
case 'menu_scammer':
  await conn.sendMessage(from, { text: '‚ö†Ô∏è *Scammer Info*\n‚Ä¢ report scammer numbers\n...' }, { quoted: mekMap[from] });
  break;
case 'menu_logo':
  await conn.sendMessage(from, { text: 'üñºÔ∏è *Logo Menu*\n‚Ä¢ neonlight\n‚Ä¢ galaxy\n‚Ä¢ paint\n...' }, { quoted: mekMap[from] });
  break;
    }
  } catch (error) {
    console.error(error);
  }
});

cmd({
  pattern: "menu",
  alias: ["sheikh"],
  desc: "menu the bot",
  react: "üìú",
  category: "main"
}, async (conn, mek, m, { from, reply, pushname }) => {
  try {
    currentPage[from] = 0;
    mekMap[from] = mek;
    const sentMsg = await conn.sendMessage(from, buildButtonMessage(currentPage[from], from), { quoted: mek });
  } catch (error) {
    console.error(error);
  }
});
